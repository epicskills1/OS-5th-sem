#include <stdio.h>

#define MAX_PROCESSES 5
#define MAX_RESOURCES 3

int available[MAX_RESOURCES];
int maximum[MAX_PROCESSES][MAX_RESOURCES];
int allocation[MAX_PROCESSES][MAX_RESOURCES];
int need[MAX_PROCESSES][MAX_RESOURCES];

int nProcesses, nResources;

void initialize() {
    // Input the number of processes and resources
    printf("Enter the number of processes: ");
    scanf("%d", &nProcesses);

    printf("Enter the number of resources: ");
    scanf("%d", &nResources);

    // Input the available resources
    printf("Enter the available resources:\n");
    for (int i = 0; i < nResources; ++i) {
        scanf("%d", &available[i]);
    }

    // Input the maximum resources each process can claim
    printf("Enter the maximum resources each process can claim:\n");
    for (int i = 0; i < nProcesses; ++i) {
        printf("For process %d: ", i + 1);
        for (int j = 0; j < nResources; ++j) {
            scanf("%d", &maximum[i][j]);
        }
    }

    // Input the resources currently allocated to each process
    printf("Enter the resources currently allocated to each process:\n");
    for (int i = 0; i < nProcesses; ++i) {
        printf("For process %d: ", i + 1);
        for (int j = 0; j < nResources; ++j) {
            scanf("%d", &allocation[i][j]);
        }
    }

    // Calculate the need matrix
    for (int i = 0; i < nProcesses; ++i) {
        for (int j = 0; j < nResources; ++j) {
            need[i][j] = maximum[i][j] - allocation[i][j];
        }
    }
}

int requestResources(int process, int request[]) {
    // Check if the request is within the available resources
    for (int i = 0; i < nResources; ++i) {
        if (request[i] > need[process][i] || request[i] > available[i]) {
            return 0; // Request exceeds need or available resources
        }
    }

    // Simulate the allocation to check for safety
    for (int i = 0; i < nResources; ++i) {
        available[i] -= request[i];
        allocation[process][i] += request[i];
        need[process][i] -= request[i];
    }

    if (isSafe()) {
        return 1; // Request is granted
    } else {
        // Roll back the simulation
        for (int i = 0; i < nResources; ++i) {
            available[i] += request[i];
            allocation[process][i] -= request[i];
            need[process][i] += request[i];
        }
        return 0; // Request is denied
    }
}

int releaseResources(int process, int release[]) {
    // Check if the release is within the allocated resources
    for (int i = 0; i < nResources; ++i) {
        if (release[i] > allocation[process][i]) {
            return 0; // Release exceeds allocated resources
        }
    }

    // Release the resources
    for (int i = 0; i < nResources; ++i) {
        available[i] += release[i];
        allocation[process][i] -= release[i];
        need[process][i] += release[i];
    }

    return 1; // Release is successful
}

int isSafe() {
    int work[MAX_RESOURCES];
    int finish[MAX_PROCESSES];

    // Initialize work and finish arrays
    for (int i = 0; i < nResources; ++i) {
        work[i] = available[i];
    }

    for (int i = 0; i < nProcesses; ++i) {
        finish[i] = 0;
    }

    // Find an unfinished process that can be satisfied with available resources
    int count = 0;
    while (count < nProcesses) {
        int found = 0;

        for (int i = 0; i < nProcesses; ++i) {
            if (finish[i] == 0) {
                int j;
                for (j = 0; j < nResources; ++j) {
                    if (need[i][j] > work[j]) {
                        break;
                    }
                }

                if (j == nResources) {
                    // Process i can be satisfied
                    for (int k = 0; k < nResources; ++k) {
                        work[k] += allocation[i][k];
                    }
                    finish[i] = 1;
                    found = 1;
                    ++count;
                }
            }
        }

        // If no process can be satisfied
