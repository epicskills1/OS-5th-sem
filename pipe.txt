#include <stdio.h>
#include <unistd.h>
#include <string.h>

int main() {
    int pipefd[2];
    pid_t pid;

    // Create a pipe
    if (pipe(pipefd) == -1) {
        perror("pipe");
        return 1;
    }

    // Fork a new process
    pid = fork();

    if (pid < 0) {
        fprintf(stderr, "Fork failed\n");
        return 1;
    } else if (pid == 0) {
        // Child process
        close(pipefd[1]);  // Close write end of the pipe

        char message[100];
        // Read message from the parent through the pipe
        read(pipefd[0], message, sizeof(message));
        printf("Child received message from parent: %s\n", message);

        close(pipefd[0]);  // Close read end of the pipe in the child
    } else {
        // Parent process
        close(pipefd[0]);  // Close read end of the pipe

        char message[] = "Hello from Parent!";
        // Write message to the child through the pipe
        write(pipefd[1], message, strlen(message) + 1);

        close(pipefd[1]);  // Close write end of the pipe in the parent
    }

    return 0;
}
