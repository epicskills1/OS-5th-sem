#include <stdio.h>

// Structure to represent a process
struct Process {
    int processId;
    int arrivalTime;
    int burstTime;
};

// Function to sort processes based on burst time
void sortProcesses(struct Process processes[], int n) {
    for (int i = 0; i < n - 1; i++) {
        for (int j = 0; j < n - i - 1; j++) {
            if (processes[j].burstTime > processes[j + 1].burstTime) {
                // Swap processes if they are out of order
                struct Process temp = processes[j];
                processes[j] = processes[j + 1];
                processes[j + 1] = temp;
            }
        }
    }
}

// Function to calculate waiting time and turnaround time for each process
void calculateTimes(struct Process processes[], int n, int waitingTime[], int turnaroundTime[]) {
    waitingTime[0] = 0;
    turnaroundTime[0] = processes[0].burstTime;

    // Calculate waiting time and turnaround time for each process
    for (int i = 1; i < n; i++) {
        waitingTime[i] = turnaroundTime[i - 1];
        turnaroundTime[i] = waitingTime[i] + processes[i].burstTime;
    }
}

// Function to calculate average waiting time and average turnaround time
void calculateAverages(int waitingTime[], int turnaroundTime[], int n, float *avgWaitingTime, float *avgTurnaroundTime) {
    int totalWaitingTime = 0, totalTurnaroundTime = 0;

    // Calculate total waiting time and total turnaround time
    for (int i = 0; i < n; i++) {
        totalWaitingTime += waitingTime[i];
        totalTurnaroundTime += turnaroundTime[i];
    }

    // Calculate averages
    *avgWaitingTime = (float)totalWaitingTime / n;
    *avgTurnaroundTime = (float)totalTurnaroundTime / n;
}

// Function to display the schedule and times for each process
void displaySchedule(struct Process processes[], int n, int waitingTime[], int turnaroundTime[]) {
    printf("Process\tArrival Time\tBurst Time\tWaiting Time\tTurnaround Time\n");

    for (int i = 0; i < n; i++) {
        printf("%d\t%d\t\t%d\t\t%d\t\t%d\n", processes[i].processId, processes[i].arrivalTime, processes[i].burstTime, waitingTime[i], turnaroundTime[i]);
    }
}

int main() {
    int n;

    // Input the number of processes
    printf("Enter the number of processes: ");
    scanf("%d", &n);

    struct Process processes[n];

    // Input process details
    for (int i = 0; i < n; i++) {
        processes[i].processId = i + 1;
        processes[i].arrivalTime = 0;  // Assuming all processes arrive at time zero
        printf("Enter burst time for process %d: ", i + 1);
        scanf("%d", &processes[i].burstTime);
    }

    int waitingTime[n], turnaroundTime[n];

    // Sort processes based on burst time
    sortProcesses(processes, n);

    // Calculate waiting time and turnaround time
    calculateTimes(processes, n, waitingTime, turnaroundTime);

    // Calculate average waiting time and average turnaround time
    float avgWaitingTime, avgTurnaroundTime;
    calculateAverages(waitingTime, turnaroundTime, n, &avgWaitingTime, &avgTurnaroundTime);

    // Display the schedule and times for each process
    displaySchedule(processes, n, waitingTime, turnaroundTime);

    // Display average waiting time and average turnaround time
    printf("\nAverage Waiting Time: %.2f\n", avgWaitingTime);
    printf("Average Turnaround Time: %.2f\n", avgTurnaroundTime);

    return 0;
}
